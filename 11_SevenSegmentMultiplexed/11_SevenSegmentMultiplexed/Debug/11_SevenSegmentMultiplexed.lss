
11_SevenSegmentMultiplexed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000003ba  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b1f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001ce  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000154  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e3  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000008c  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000157  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000020c  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DisplayDigit>:
		None
 --------------------------------------------------------*/
static void DisplayDigit(uint8_t val) {
	
	// Clear only bits (PC6:PC0)
	PORTC &= 0x80;
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	90 78       	andi	r25, 0x80	; 128
  80:	95 bb       	out	0x15, r25	; 21

	switch (val) {
  82:	85 30       	cpi	r24, 0x05	; 5
  84:	39 f1       	breq	.+78     	; 0xd4 <DisplayDigit+0x58>
  86:	58 f4       	brcc	.+22     	; 0x9e <DisplayDigit+0x22>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	c1 f0       	breq	.+48     	; 0xbc <DisplayDigit+0x40>
  8c:	18 f4       	brcc	.+6      	; 0x94 <DisplayDigit+0x18>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	69 f4       	brne	.+26     	; 0xac <DisplayDigit+0x30>
  92:	10 c0       	rjmp	.+32     	; 0xb4 <DisplayDigit+0x38>
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	b1 f0       	breq	.+44     	; 0xc4 <DisplayDigit+0x48>
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	41 f4       	brne	.+16     	; 0xac <DisplayDigit+0x30>
  9c:	17 c0       	rjmp	.+46     	; 0xcc <DisplayDigit+0x50>
  9e:	87 30       	cpi	r24, 0x07	; 7
  a0:	09 f1       	breq	.+66     	; 0xe4 <DisplayDigit+0x68>
  a2:	e0 f0       	brcs	.+56     	; 0xdc <DisplayDigit+0x60>
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	11 f1       	breq	.+68     	; 0xec <DisplayDigit+0x70>
  a8:	89 30       	cpi	r24, 0x09	; 9
  aa:	11 f1       	breq	.+68     	; 0xf0 <DisplayDigit+0x74>
		// Print 0 on 7-segment if num = 0 or num > 9
		default:
		case 0:
			PORTC |= 0xC0;
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 6c       	ori	r24, 0xC0	; 192
  b0:	85 bb       	out	0x15, r24	; 21
			break;
  b2:	08 95       	ret
		case 1:
			PORTC |= 0xF9;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	89 6f       	ori	r24, 0xF9	; 249
  b8:	85 bb       	out	0x15, r24	; 21
			break;
  ba:	08 95       	ret
		case 2:
			PORTC |= 0xA4;
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	84 6a       	ori	r24, 0xA4	; 164
  c0:	85 bb       	out	0x15, r24	; 21
			break;
  c2:	08 95       	ret
		case 3:
			PORTC |= 0xB0;
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	80 6b       	ori	r24, 0xB0	; 176
  c8:	85 bb       	out	0x15, r24	; 21
			break;
  ca:	08 95       	ret
		case 4:
			PORTC |= 0x99;
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	89 69       	ori	r24, 0x99	; 153
  d0:	85 bb       	out	0x15, r24	; 21
			break;
  d2:	08 95       	ret
		case 5:
			PORTC |= 0x92;
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	82 69       	ori	r24, 0x92	; 146
  d8:	85 bb       	out	0x15, r24	; 21
			break;
  da:	08 95       	ret
		case 6:
			PORTC |= 0x82;
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	82 68       	ori	r24, 0x82	; 130
  e0:	85 bb       	out	0x15, r24	; 21
			break;
  e2:	08 95       	ret
		case 7:
			PORTC |= 0xF8;
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	88 6f       	ori	r24, 0xF8	; 248
  e8:	85 bb       	out	0x15, r24	; 21
			break;
  ea:	08 95       	ret
		case 8:
			PORTC |= 0x80;
  ec:	af 9a       	sbi	0x15, 7	; 21
			break;
  ee:	08 95       	ret
		case 9:
			PORTC |= 0x90;
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 69       	ori	r24, 0x90	; 144
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	08 95       	ret

000000f8 <main>:
/* ----------------------------------------------------------------*/ 

int main(void) {
	
	// PORTC (PC6:PC0) as GPIO Output to drive 7 Segment
	DDRC = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 bb       	out	0x14, r24	; 20
	// PORTD (PD3:PD0) as GPIO Output to select individual segment of multiplexed 7 segment
	// PD3  ------ Digit 0
	// PD2  ------ Digit 1
	// PD1  ------ Digit 2
	// PD0  ------ Digit 3
	DDRD = 0x0F;
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	81 bb       	out	0x11, r24	; 17
	
	// De-select all segment to write logic '1' to corresponding bit (PNP transistor)
	// Power down for all segment
	PORTD |= 0x0F;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	82 bb       	out	0x12, r24	; 18
	// 	Clock prescaler: 64 (CS02:00 = 3), Timer0 Clock = F_CPU/64
	// 	Enable TIMER0 Output Compare Match INT(OCIE0 = 1)
	// 	RESET Count register (TCNT0 = 0)
	// 	Start timer with prescaler 
	/* ------------------------------------------------------------*/
	OCR0 = 78 - 1;
 106:	8d e4       	ldi	r24, 0x4D	; 77
 108:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= 0x02;
 10a:	89 b7       	in	r24, 0x39	; 57
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
 110:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0x0B;
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	83 bf       	out	0x33, r24	; 51
	
	// Enable Global Interrupt (BIT7 of SREG)
	sei();
 116:	78 94       	sei
	
    while (1) {
		// Check if count val is less than 9999
		// If so then increment count value else set 0
		if (Count < 9999)
 118:	80 91 60 00 	lds	r24, 0x0060
 11c:	90 91 61 00 	lds	r25, 0x0061
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	97 42       	sbci	r25, 0x27	; 39
 124:	50 f4       	brcc	.+20     	; 0x13a <main+0x42>
			Count = Count + 1;
 126:	80 91 60 00 	lds	r24, 0x0060
 12a:	90 91 61 00 	lds	r25, 0x0061
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 61 00 	sts	0x0061, r25
 134:	80 93 60 00 	sts	0x0060, r24
 138:	04 c0       	rjmp	.+8      	; 0x142 <main+0x4a>
		else
			Count = 0;
 13a:	10 92 61 00 	sts	0x0061, r1
 13e:	10 92 60 00 	sts	0x0060, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	96 e8       	ldi	r25, 0x86	; 134
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x50>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x5a>
 152:	00 00       	nop
 154:	e1 cf       	rjmp	.-62     	; 0x118 <main+0x20>

00000156 <__vector_10>:
		_delay_ms(500);
    }
}

// TIMER0 Output Compare Match Interrupt Service Routine
ISR(TIMER0_COMP_vect) {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	6f 93       	push	r22
 16a:	7f 93       	push	r23
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	
	// Local variable to select each segment
	static uint8_t ctn = 0;
	
	// Copy Count value to a local variable
	uint16_t temp = Count;
 178:	40 91 60 00 	lds	r20, 0x0060
 17c:	50 91 61 00 	lds	r21, 0x0061
	
	// De-select all segment to write logic '1' to corresponding bit (PNP transistor)
	PORTD |= 0x0F;
 180:	82 b3       	in	r24, 0x12	; 18
 182:	8f 60       	ori	r24, 0x0F	; 15
 184:	82 bb       	out	0x12, r24	; 18
	
	switch (ctn) {
 186:	80 91 62 00 	lds	r24, 0x0062
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	29 f1       	breq	.+74     	; 0x1d8 <__vector_10+0x82>
 18e:	38 f0       	brcs	.+14     	; 0x19e <__vector_10+0x48>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	09 f4       	brne	.+2      	; 0x196 <__vector_10+0x40>
 194:	48 c0       	rjmp	.+144    	; 0x226 <__vector_10+0xd0>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	09 f0       	breq	.+2      	; 0x19c <__vector_10+0x46>
 19a:	9c c0       	rjmp	.+312    	; 0x2d4 <__vector_10+0x17e>
 19c:	6d c0       	rjmp	.+218    	; 0x278 <__vector_10+0x122>
		// Digit 0 update time
		case 0:
			// Select Digit 0
			// Power up for Digit 0
			PORTD &= ~0x08;
 19e:	93 98       	cbi	0x12, 3	; 18
			// Write Value to Digit 0
			DisplayDigit(temp%10);
 1a0:	9a 01       	movw	r18, r20
 1a2:	ad ec       	ldi	r26, 0xCD	; 205
 1a4:	bc ec       	ldi	r27, 0xCC	; 204
 1a6:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	9c 01       	movw	r18, r24
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	24 2f       	mov	r18, r20
 1ce:	28 1b       	sub	r18, r24
 1d0:	82 2f       	mov	r24, r18
 1d2:	0e 94 3e 00 	call	0x7c	; 0x7c <DisplayDigit>
			break;
 1d6:	7e c0       	rjmp	.+252    	; 0x2d4 <__vector_10+0x17e>
			
		// Digit 1 update time
		case 1:
			// Select Digit 1
			// Power up for Digit 1
			PORTD &= ~0x04;
 1d8:	92 98       	cbi	0x12, 2	; 18
			// Write Value to Digit 1
			DisplayDigit((temp/10)%10);
 1da:	9a 01       	movw	r18, r20
 1dc:	ad ec       	ldi	r26, 0xCD	; 205
 1de:	bc ec       	ldi	r27, 0xCC	; 204
 1e0:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 1e4:	ac 01       	movw	r20, r24
 1e6:	56 95       	lsr	r21
 1e8:	47 95       	ror	r20
 1ea:	56 95       	lsr	r21
 1ec:	47 95       	ror	r20
 1ee:	56 95       	lsr	r21
 1f0:	47 95       	ror	r20
 1f2:	9a 01       	movw	r18, r20
 1f4:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	9c 01       	movw	r18, r24
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	82 0f       	add	r24, r18
 218:	93 1f       	adc	r25, r19
 21a:	24 2f       	mov	r18, r20
 21c:	28 1b       	sub	r18, r24
 21e:	82 2f       	mov	r24, r18
 220:	0e 94 3e 00 	call	0x7c	; 0x7c <DisplayDigit>
			break;
 224:	57 c0       	rjmp	.+174    	; 0x2d4 <__vector_10+0x17e>
			
		// Digit 2 update time
		case 2: 
			// Select Digit 2
			// Power up for Digit 2
			PORTD &= ~0x02;
 226:	91 98       	cbi	0x12, 1	; 18
			// Write Value to Digit 2
			DisplayDigit((temp/100)%10);
 228:	9a 01       	movw	r18, r20
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	ab e7       	ldi	r26, 0x7B	; 123
 234:	b4 e1       	ldi	r27, 0x14	; 20
 236:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 23a:	ac 01       	movw	r20, r24
 23c:	56 95       	lsr	r21
 23e:	47 95       	ror	r20
 240:	9a 01       	movw	r18, r20
 242:	ad ec       	ldi	r26, 0xCD	; 205
 244:	bc ec       	ldi	r27, 0xCC	; 204
 246:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	9c 01       	movw	r18, r24
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	24 2f       	mov	r18, r20
 26e:	28 1b       	sub	r18, r24
 270:	82 2f       	mov	r24, r18
 272:	0e 94 3e 00 	call	0x7c	; 0x7c <DisplayDigit>
			break;
 276:	2e c0       	rjmp	.+92     	; 0x2d4 <__vector_10+0x17e>
			
		// Digit 3 update time
		case 3:
			// Select Digit 3
			// Power up for Digit 3
			PORTD &= ~0x01;
 278:	90 98       	cbi	0x12, 0	; 18
			// Write Value to Digit 3
			DisplayDigit((temp/1000)%10);
 27a:	9a 01       	movw	r18, r20
 27c:	36 95       	lsr	r19
 27e:	27 95       	ror	r18
 280:	36 95       	lsr	r19
 282:	27 95       	ror	r18
 284:	36 95       	lsr	r19
 286:	27 95       	ror	r18
 288:	a5 ec       	ldi	r26, 0xC5	; 197
 28a:	b0 e2       	ldi	r27, 0x20	; 32
 28c:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 290:	ac 01       	movw	r20, r24
 292:	52 95       	swap	r21
 294:	42 95       	swap	r20
 296:	4f 70       	andi	r20, 0x0F	; 15
 298:	45 27       	eor	r20, r21
 29a:	5f 70       	andi	r21, 0x0F	; 15
 29c:	45 27       	eor	r20, r21
 29e:	9a 01       	movw	r18, r20
 2a0:	ad ec       	ldi	r26, 0xCD	; 205
 2a2:	bc ec       	ldi	r27, 0xCC	; 204
 2a4:	0e 94 85 01 	call	0x30a	; 0x30a <__umulhisi3>
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	9c 01       	movw	r18, r24
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	82 0f       	add	r24, r18
 2c8:	93 1f       	adc	r25, r19
 2ca:	24 2f       	mov	r18, r20
 2cc:	28 1b       	sub	r18, r24
 2ce:	82 2f       	mov	r24, r18
 2d0:	0e 94 3e 00 	call	0x7c	; 0x7c <DisplayDigit>
			break;
	}
	
	// Increment display selector variable
	ctn = ctn + 1;
 2d4:	80 91 62 00 	lds	r24, 0x0062
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
	
	// Check if All display written (0 ... 3)
	if (ctn == 4)
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <__vector_10+0x18e>
			DisplayDigit((temp/1000)%10);
			break;
	}
	
	// Increment display selector variable
	ctn = ctn + 1;
 2de:	80 93 62 00 	sts	0x0062, r24
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_10+0x192>
	
	// Check if All display written (0 ... 3)
	if (ctn == 4)
		// If all written, then restart from 0
		ctn = 0;
 2e4:	10 92 62 00 	sts	0x0062, r1
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__umulhisi3>:
 30a:	a2 9f       	mul	r26, r18
 30c:	b0 01       	movw	r22, r0
 30e:	b3 9f       	mul	r27, r19
 310:	c0 01       	movw	r24, r0
 312:	a3 9f       	mul	r26, r19
 314:	01 d0       	rcall	.+2      	; 0x318 <__umulhisi3+0xe>
 316:	b2 9f       	mul	r27, r18
 318:	70 0d       	add	r23, r0
 31a:	81 1d       	adc	r24, r1
 31c:	11 24       	eor	r1, r1
 31e:	91 1d       	adc	r25, r1
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
