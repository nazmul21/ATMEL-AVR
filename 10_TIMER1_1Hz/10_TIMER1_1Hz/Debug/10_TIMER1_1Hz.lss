
10_TIMER1_1Hz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a8  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000006b  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f3  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c4  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
/* ----------------------------------------------------------------*/  

int main(void) {
	
	// PORTC (PC7:PC0) as GPIO Output
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	// 	OC1B as GPIO (COM1B1:COM1B0 = 0), Clock prescaler: 64 (CS12:10 = 3)
	// 	Enable TIMER1 Output Compare A Match INT (OCIE1A = 1)
	// 	RESET Count register TCNT1 = 0;
	// 	Start timer with prescaler 
	/* ------------------------------------------------------------*/
	OCR1A = 15625 -1;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	9d e3       	ldi	r25, 0x3D	; 61
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
  78:	1d bc       	out	0x2d, r1	; 45
  7a:	1c bc       	out	0x2c, r1	; 44
	TIMSK |= 0x10;
  7c:	89 b7       	in	r24, 0x39	; 57
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0x00;
  82:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0B;
  84:	8b e0       	ldi	r24, 0x0B	; 11
  86:	8e bd       	out	0x2e, r24	; 46
	
	// Enable Global Interrupt (BIT7 of SREG)
	sei();
  88:	78 94       	sei
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x1e>

0000008c <__vector_7>:
		
    }
}

// TIMER1 Output Compare Match A Interrupt Service Routine
ISR(TIMER1_COMPA_vect) {
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
	
	// Toggle Output LEDs
	PORTC ^= 0xFF;
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 95       	com	r24
  9c:	85 bb       	out	0x15, r24	; 21
}
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
