
14_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000009e  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e9  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b0  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000111  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c3  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Receive>:
		unsigned char 			8 bit received data
 --------------------------------------------------------*/

unsigned char USART_Receive(void) {
	// Wait for data to be received
	while ( !(UCSRA & (1<<RXC)) );
  6c:	5f 9b       	sbis	0x0b, 7	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <USART_Receive>
	
	// Get and return received data from buffer 
	return UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
}
  72:	08 95       	ret

00000074 <USART_Transmit>:
 *						Return
		None	
 --------------------------------------------------------*/
void USART_Transmit(unsigned char data) {
	// Wait for empty transmit buffer 
	while ( !( UCSRA & (1<<UDRE)) );
  74:	5d 9b       	sbis	0x0b, 5	; 11
  76:	fe cf       	rjmp	.-4      	; 0x74 <USART_Transmit>
	
	// Put data into buffer, sends the data 
	UDR = data;
  78:	8c b9       	out	0x0c, r24	; 12
  7a:	08 95       	ret

0000007c <main>:
	//	Enable double speed mode (U2X = 1)
	// 	Disable Rx, Tx complete INT, Enable Rx, Tx module
	//	USART as asynchronous mode, No Parity (UPM1:0 = 0), One STOP bit (USBS = 0)
	//	Char Size 8 bit (UCSZ2:0 = 3)
	/* ------------------------------------------------------------*/
	UBRRH = 0;
  7c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	89 b9       	out	0x09, r24	; 9
	UCSRA |= 0x02;
  82:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB |= 0x18;
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	88 61       	ori	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= 0x86;
  8a:	80 b5       	in	r24, 0x20	; 32
  8c:	86 68       	ori	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
	
    while (1) {
		// wait until a data receive from PC
		c = USART_Receive();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Receive>
		// Send the received data back to PC 
		USART_Transmit(c);
  94:	0e 94 3a 00 	call	0x74	; 0x74 <USART_Transmit>
  98:	fb cf       	rjmp	.-10     	; 0x90 <main+0x14>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
