
12_LEDBrightnessControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000aa  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000178  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000102  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c0  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012f  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000072  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void) {
	// Local variable that used to change the duty cycle of PWM
	uint8_t Duty = 0;
	
	// PORTB (PB3/OC0) as GPIO Output
	DDRB |= 0x08;
  6c:	bb 9a       	sbi	0x17, 3	; 23
	//  Fpwm = F_CPU/(prescaler * 256) = 488.22 Hz
	//  Load Duty Cycle value to 0 (OCR0 = 0)
	// 	RESET Count register (TCNT0 = 0)
	// 	Start timer with prescaler 
	/* ------------------------------------------------------------*/
	OCR0 = 0;
  6e:	1c be       	out	0x3c, r1	; 60
	TCNT0 = 0;
  70:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0x6A;
  72:	8a e6       	ldi	r24, 0x6A	; 106
  74:	83 bf       	out	0x33, r24	; 51
    while (1) {
		
		// Increment the duty cycle from 0 to 100 after 125 mS interval
		// Note 100 doesn't mean 100%
		// Duty Cycle in % (OCR0 = 50) = 50 / 255 = 20%
		for (Duty = 0; Duty <= 100; Duty++) {
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	94 e6       	ldi	r25, 0x64	; 100
  7a:	08 c0       	rjmp	.+16     	; 0x8c <main+0x20>
			OCR0 = Duty;
  7c:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e1 e1       	ldi	r30, 0x11	; 17
  80:	fa e7       	ldi	r31, 0x7A	; 122
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
    while (1) {
		
		// Increment the duty cycle from 0 to 100 after 125 mS interval
		// Note 100 doesn't mean 100%
		// Duty Cycle in % (OCR0 = 50) = 50 / 255 = 20%
		for (Duty = 0; Duty <= 100; Duty++) {
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	85 36       	cpi	r24, 0x65	; 101
  8e:	b0 f3       	brcs	.-20     	; 0x7c <main+0x10>
  90:	89 2f       	mov	r24, r25
		
		// Decrement the duty cycle from 100 to 0 after 125 mS interval
		// Note 100 doesn't mean 100%
		// Duty Cycle in % (OCR0 = 50) = 50 / 255 = 20%
		for (Duty = 100; Duty > 0; Duty--) {
			OCR0 = Duty;
  92:	8c bf       	out	0x3c, r24	; 60
  94:	e1 e1       	ldi	r30, 0x11	; 17
  96:	fa e7       	ldi	r31, 0x7A	; 122
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
		}
		
		// Decrement the duty cycle from 100 to 0 after 125 mS interval
		// Note 100 doesn't mean 100%
		// Duty Cycle in % (OCR0 = 50) = 50 / 255 = 20%
		for (Duty = 100; Duty > 0; Duty--) {
  a0:	81 50       	subi	r24, 0x01	; 1
  a2:	b9 f7       	brne	.-18     	; 0x92 <main+0x26>
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0x20>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
