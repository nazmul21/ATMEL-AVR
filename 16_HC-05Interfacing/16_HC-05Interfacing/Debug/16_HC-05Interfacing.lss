
16_HC-05Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800080  00800080  0000025c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001e9  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000113  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014a  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b8  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000112  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000122  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8a:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Transmit>:
 *						Return
		None	
 -----------------------------------------------------*/
void USART_Transmit(unsigned char c) {
	// Wait for empty transmit buffer 
	while (!( UCSRA & (1<<UDRE)));
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <USART_Transmit>
	
	// Put data into buffer, sends the data
	UDR = c;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <UART_SendString>:
		unsigned char *				data string to be transmitted

 *						Return
		None	
 -----------------------------------------------------*/
void UART_SendString(unsigned char *str) {
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	while (*str) {
  a0:	88 81       	ld	r24, Y
  a2:	88 23       	and	r24, r24
  a4:	31 f0       	breq	.+12     	; 0xb2 <UART_SendString+0x18>
		unsigned char *				data string to be transmitted

 *						Return
		None	
 -----------------------------------------------------*/
void UART_SendString(unsigned char *str) {
  a6:	21 96       	adiw	r28, 0x01	; 1
	while (*str) {
		USART_Transmit(*str);
  a8:	0e 94 49 00 	call	0x92	; 0x92 <USART_Transmit>

 *						Return
		None	
 -----------------------------------------------------*/
void UART_SendString(unsigned char *str) {
	while (*str) {
  ac:	89 91       	ld	r24, Y+
  ae:	81 11       	cpse	r24, r1
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <UART_SendString+0xe>
		USART_Transmit(*str);
		str++;
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <main>:
/* ----------------------------------------------------------------*/

int main(void) {
	
	// PORTC (PC1:PC0) as GPIO Output to drive LEDs
	DDRC |= 0x03;
  b8:	84 b3       	in	r24, 0x14	; 20
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	84 bb       	out	0x14, r24	; 20
	//	Enable double speed mode (U2X = 1)
	// 	Enable Rx complete INT, Disable Tx Complete Interrupt, Enable Rx, Tx module
	//	USART as asynchronous mode, No Parity (UPM1:0 = 0), One STOP bit (USBS = 0)
	//	Char Size 8 bit (UCSZ2:0 = 3)
	/* ------------------------------------------------------------*/
	UBRRH = 0;
  be:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	89 b9       	out	0x09, r24	; 9
	UCSRA |= 0x02;
  c4:	59 9a       	sbi	0x0b, 1	; 11
	UCSRB |= 0x98;
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	88 69       	ori	r24, 0x98	; 152
  ca:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= 0x86;
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	86 68       	ori	r24, 0x86	; 134
  d0:	80 bd       	out	0x20, r24	; 32
	
	// Enable Global Interrupt (BIT7 of SREG)
	sei();
  d2:	78 94       	sei
	
	// Send a string to Smartphone
	UART_SendString((unsigned char *)"Hello World!\r\n");
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_SendString>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x24>

000000de <ExecuteCommand>:
 *						Return
		None	
 -----------------------------------------------------*/
void ExecuteCommand(void) {
	// Check if the first data of command is 'L'
	if (cmd[0] == 'L') {
  de:	80 91 81 00 	lds	r24, 0x0081
  e2:	8c 34       	cpi	r24, 0x4C	; 76
  e4:	19 f5       	brne	.+70     	; 0x12c <ExecuteCommand+0x4e>
		// n i.e cmd[1] should be '1' to control LED1, so check it first
		if ( cmd[1] == '1' ) {
  e6:	80 91 82 00 	lds	r24, 0x0082
  ea:	81 33       	cpi	r24, 0x31	; 49
  ec:	61 f4       	brne	.+24     	; 0x106 <ExecuteCommand+0x28>
			// If d i.e. cmd[3] is equal to '1' then turn LED1 ON
			if ( cmd[3] == '1' )
  ee:	80 91 84 00 	lds	r24, 0x0084
  f2:	81 33       	cpi	r24, 0x31	; 49
  f4:	11 f4       	brne	.+4      	; 0xfa <ExecuteCommand+0x1c>
				PORTC |= 0x01;
  f6:	a8 9a       	sbi	0x15, 0	; 21
  f8:	01 c0       	rjmp	.+2      	; 0xfc <ExecuteCommand+0x1e>
			// Else turn LED1 OFF
			else 
				PORTC &= ~0x01;
  fa:	a8 98       	cbi	0x15, 0	; 21
			
			// Send OK as feedback to Smartphone			
			UART_SendString((unsigned char *)"OK\r\n");
  fc:	8f e6       	ldi	r24, 0x6F	; 111
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_SendString>
 104:	08 95       	ret
		}
		
		// n i.e cmd[1] should be '2' to control LED2, so check it first
		else if (cmd[1] == '2') {
 106:	82 33       	cpi	r24, 0x32	; 50
 108:	61 f4       	brne	.+24     	; 0x122 <ExecuteCommand+0x44>
			// If d i.e. cmd[3] is equal to '1' then turn LED2 ON
			if ( cmd[3] == '1' )
 10a:	80 91 84 00 	lds	r24, 0x0084
 10e:	81 33       	cpi	r24, 0x31	; 49
 110:	11 f4       	brne	.+4      	; 0x116 <ExecuteCommand+0x38>
				PORTC |= 0x02;
 112:	a9 9a       	sbi	0x15, 1	; 21
 114:	01 c0       	rjmp	.+2      	; 0x118 <ExecuteCommand+0x3a>
			// Else turn LED2 OFF
			else
				PORTC &= ~0x02;
 116:	a9 98       	cbi	0x15, 1	; 21
			
			// Send OK as feedback to Smartphone	
			UART_SendString((unsigned char *)"OK\r\n");
 118:	8f e6       	ldi	r24, 0x6F	; 111
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_SendString>
 120:	08 95       	ret
		
		// n i.e cmd[1] is neither '1' nor '2', so Its a bad 
		// command for this implementation
		else {
			// Send "E02" error code as feedback to Smartphone
			UART_SendString((unsigned char *)"E02\r\n");
 122:	84 e7       	ldi	r24, 0x74	; 116
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_SendString>
 12a:	08 95       	ret
	
	// First character is not 'L', so Its a bad 
	// command for this implementation
	else {
		// Send "E01" error code as feedback to Smartphone
		UART_SendString((unsigned char *)"E01\r\n");
 12c:	8a e7       	ldi	r24, 0x7A	; 122
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_SendString>
 134:	08 95       	ret

00000136 <__vector_13>:
	}
}

// USART Receive Complete INT Service Routine
ISR(USART_RXC_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	// Check if receive complete INT flag is set
	if (UCSRA & (1<<RXC)) {
 158:	5f 9b       	sbis	0x0b, 7	; 11
 15a:	13 c0       	rjmp	.+38     	; 0x182 <__vector_13+0x4c>
		// Copy data from USART buffer
		cmd[rx_index_ctn] = UDR;
 15c:	80 91 80 00 	lds	r24, 0x0080
 160:	9c b1       	in	r25, 0x0c	; 12
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	ef 57       	subi	r30, 0x7F	; 127
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	90 83       	st	Z, r25
		// Increment data index pointer
		rx_index_ctn++;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 80 00 	sts	0x0080, r24
		// Check if all data received for a valid command
		if (rx_index_ctn == CMD_SIZE) {
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	31 f4       	brne	.+12     	; 0x182 <__vector_13+0x4c>
			// Disable receive complete INT
			UCSRB &= ~(1<<RXCIE);
 176:	57 98       	cbi	0x0a, 7	; 10
			// Execute the command send from Smartphone
			ExecuteCommand();
 178:	0e 94 6f 00 	call	0xde	; 0xde <ExecuteCommand>
			// Set data index pointer = 0
			rx_index_ctn = 0;
 17c:	10 92 80 00 	sts	0x0080, r1
			// Enable receive complete INT
			UCSRB |= (1<<RXCIE);
 180:	57 9a       	sbi	0x0a, 7	; 10
		}
	}
} 
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
