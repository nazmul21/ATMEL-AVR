
09_TIMER0_1Hz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000b4  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000083  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000f4  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000c6  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000003c  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
/* ----------------------------------------------------------------*/ 

int main(void) {
	
	// PORTC (PC7:PC0) as GPIO Output
	DDRC = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	// 	Clock prescaler: 64 (CS02:00 = 3), Timer0 Clock = F_CPU/64
	// 	Enable TIMER0 Overflow INT(TOIE0 = 1)
	// 	RESET Count register TCNT0 = 0;
	// 	Start timer with prescaler 
	/* ------------------------------------------------------------*/
	TIMSK |= 0x01;
  80:	89 b7       	in	r24, 0x39	; 57
  82:	81 60       	ori	r24, 0x01	; 1
  84:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
  86:	12 be       	out	0x32, r1	; 50
	TCCR0 = 0x03;
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	83 bf       	out	0x33, r24	; 51
	
	// Enable Global Interrupt (BIT7 of SREG)
	sei();
  8c:	78 94       	sei
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x12>

00000090 <__vector_11>:
		
    }
}

// TIMER0 Overflow Interrupt Service Routine
ISR(TIMER0_OVF_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	// Increment overflow counter
	ovf_count = ovf_count + 1;
  9c:	80 91 60 00 	lds	r24, 0x0060
  a0:	8f 5f       	subi	r24, 0xFF	; 255
  a2:	80 93 60 00 	sts	0x0060, r24
	
	// Check if overflow count is equal to 61, which required to get 1 Sec
	if (ovf_count == 61) {
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	8d 33       	cpi	r24, 0x3D	; 61
  ac:	29 f4       	brne	.+10     	; 0xb8 <__vector_11+0x28>
		// If so, then toggle the output LEDs
		PORTC ^= 0xFF;
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	80 95       	com	r24
  b2:	85 bb       	out	0x15, r24	; 21
		
		// Reset the counter to start again
		ovf_count = 0;
  b4:	10 92 60 00 	sts	0x0060, r1
	}
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
